#!/bin/sh

. /lib/functions.sh
. /lib/functions/system.sh

# initialize defaults
export VERBOSE=1
export SAVE_CONFIG=1
export CONF_BACKUP_LIST=0
export CONF_BACKUP=
export CONF_RESTORE=
export NEED_IMAGE=

# parse options
while [ -n "$1" ]; do
	case "$1" in
		-v) export VERBOSE="$((VERBOSE + 1))" ;;
		-q) export VERBOSE="$((VERBOSE - 1))" ;;
		-b | --create-backup)
			export CONF_BACKUP="$2" NEED_IMAGE=1
			shift
			;;
		-r | --restore-backup)
			export CONF_RESTORE="$2" NEED_IMAGE=1
			shift
			;;
		-l | --list-backup) export CONF_BACKUP_LIST=1 ;;
		-*)
			echo "Invalid option: $1" >&2
			exit 1
			;;
		*) break ;;
	esac
	shift
done

export CONFFILES=/tmp/sysupgrade.conffiles
export CONF_TAR=/tmp/sysupgrade.tgz

IMAGE="$1"

[ -z "$IMAGE" ] && [ -z "$NEED_IMAGE" ] && [ $CONF_BACKUP_LIST -eq 0 ] && {
	cat <<EOF
Usage: $0 <backup-command> <file>

backup-command:
	-b | --create-backup <file>
	             create .tar.gz of files specified in sysupgrade.conf
	             then exit. Does not flash an image. If file is '-',
	             i.e. stdout, verbosity is set to 0 (i.e. quiet).
	-r | --restore-backup <file>
	             restore a .tar.gz created with sysupgrade -b
	             then exit. Does not flash an image. If file is '-',
	             the archive is read from stdin.
	-l | --list-backup
	             list the files that would be backed up when calling
	             sysupgrade -b. Does not create a backup file.

EOF
	exit 1
}

[ -n "$IMAGE" ] && [ -n "$NEED_IMAGE" ] && {
	cat <<-EOF
		-b|--create-backup and -r|--restore-backup do not perform a firmware upgrade.
		Do not specify both -b|-r and a firmware image.
	EOF
	exit 1
}

# prevent messages from clobbering the tarball when using stdout
[ "$CONF_BACKUP" = "-" ] && export VERBOSE=0

list_conffiles() {
	awk '
		BEGIN { conffiles = 0 }
		/^Conffiles:/ { conffiles = 1; next }
		!/^ / { conffiles = 0; next }
		conffiles == 1 { print }
	' /usr/lib/opkg/status
}

list_changed_conffiles() {
	# Cannot handle spaces in filenames - but opkg cannot either...
	list_conffiles | while read file csum; do
		[ -r "$file" ] || continue

		echo "${csum}  ${file}" | busybox sha256sum -sc - || echo "$file"
	done
}

add_conffiles() {
	local file="$1"
	(
		find $(sed -ne '/^[[:space:]]*$/d; /^#/d; p' \
			/etc/sysupgrade.conf /lib/upgrade/keep.d/* 2>/dev/null) \
			\( -type f -o -type l \) $find_filter 2>/dev/null
		list_changed_conffiles
	) | sort -u >"$file"
	return 0
}

sysupgrade_init_conffiles="add_conffiles"
find_filter=""

include /lib/upgrade

do_save_conffiles() {
	local conf_tar="$1"

	run_hooks "$CONFFILES" $sysupgrade_init_conffiles

	v "Saving config files..."
	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar c${TAR_V}zf "$conf_tar" -T "$CONFFILES" 2>/dev/null
	if [ "$?" -ne 0 ]; then
		echo "Failed to create the configuration backup."
		rm -f "$conf_tar"
		exit 1
	fi

	rm -f "$CONFFILES"
}

if [ $CONF_BACKUP_LIST -eq 1 ]; then
	run_hooks "$CONFFILES" $sysupgrade_init_conffiles
	cat "$CONFFILES"
	rm -f "$CONFFILES"
	exit 0
fi

if [ -n "$CONF_BACKUP" ]; then
	do_save_conffiles "$CONF_BACKUP"
	exit $?
fi

missing_lines() {
	local file1 file2 line
	file1="$1"
	file2="$2"
	oIFS="$IFS"
	IFS=":"
	while read line; do
		set -- $line
		grep -q "^$1:" "$file2" || echo "$*"
	done <"$file1"
	IFS="$oIFS"
}

if [ -n "$CONF_RESTORE" ]; then
	if [ "$CONF_RESTORE" != "-" ] && [ ! -f "$CONF_RESTORE" ]; then
		echo "Backup archive '$CONF_RESTORE' not found." >&2
		exit 1
	fi

	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tmpdir=$(mktemp -d)
	if [ -d "$tmpdir" ]; then
		tar -C "$tmpdir" -x${TAR_V}zf "$CONF_RESTORE"
	else
		exit 1
	fi
	missing_lines /etc/passwd "$tmpdir"/etc/passwd >>"$tmpdir"/etc/passwd
	missing_lines /etc/group "$tmpdir"/etc/group >>"$tmpdir"/etc/group
	missing_lines /etc/shadow "$tmpdir"/etc/shadow >>"$tmpdir"/etc/shadow
	cp -pR "$tmpdir"/* /
	rm -rf "$tmpdir"
	exit 0
fi
